const { ethers } = require("hardhat");
const web3 = require("@solana/web3.js");
const bs58 = require("bs58");
const {
  getAssociatedTokenAddress,
  createTransferInstruction,
  createMintToInstruction
} = require('@solana/spl-token');
require("dotenv").config();
const { batchExecute } = require("./utils");

async function main() {
  console.log("‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω!");

  const connection = new web3.Connection("https://api.devnet.solana.com", "confirmed");

  const [user1] = await ethers.getSigners();
  console.log("‚úÖ –ü–æ–ª—É—á–µ–Ω —é–∑–µ—Ä:", user1.address);

  const tokenMint = new web3.PublicKey("GdLoLpQCU4knhh4KBBLN1DZQ2i1iN7RX6oF73Uzo9pPG");
  const helperAddress = "0x53c9658E3f2B419990f5f583F8048846c27b87bc";

  console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É helper...");
  const helper = await ethers.getContractAt("TestDevBootcamp", helperAddress);

  console.log("‚úÖ –ü–æ–ª—É—á–∞–µ–º Solana –∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ getNeonAddress...");
  const contractSolanaPubkey = new web3.PublicKey(
    ethers.encodeBase58(await helper.getNeonAddress(helperAddress))
  );

  const user1SolanaPubkey = new web3.PublicKey(
    ethers.encodeBase58(await helper.getNeonAddress(user1.address))
  );

  console.log("‚úÖ –í—ã—á–∏—Å–ª—è–µ–º ATA...");
  const senderATA = await getAssociatedTokenAddress(tokenMint, contractSolanaPubkey, true);
  const recipientATA = await getAssociatedTokenAddress(tokenMint, user1SolanaPubkey, true);

  console.log("üì¶ Sender ATA:", senderATA.toBase58());
  console.log("üì¶ Recipient ATA:", recipientATA.toBase58());

  console.log("‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ ATA –∞–∫–∫–∞—É–Ω—Ç–æ–≤...");
  const senderInfo = await connection.getAccountInfo(senderATA);
  const recipientInfo = await connection.getAccountInfo(recipientATA);

  if (!senderInfo || !recipientInfo) {
    console.log("‚ùå –û–¥–∏–Ω –∏–∑ ATA –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ —Å–∫—Ä–∏–ø—Ç CreateATA.");
    return;
  }

  console.log("‚úÖ –°–æ–∑–¥–∞—ë–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ mint + transfer...");
  const solanaTx = new web3.Transaction();

  solanaTx.add(
    createMintToInstruction(tokenMint, senderATA, contractSolanaPubkey, BigInt(1000 * 10 ** 9))
  );

  solanaTx.add(
    createTransferInstruction(senderATA, recipientATA, contractSolanaPubkey, BigInt(10 * 10 ** 9))
  );

  console.log("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º batchExecute —á–µ—Ä–µ–∑ helper –∫–æ–Ω—Ç—Ä–∞–∫—Ç...");
  const [tx, receipt] = await batchExecute(
    solanaTx.instructions,
    [0, 0],
    helper,
    undefined,
    user1
  );

  console.log("‚úÖ –£—Å–ø–µ—Ö! –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. Tx:", tx.hash);
}

// üß† –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–∑–æ–≤
main().catch((error) => {
  console.error("‚ùå –û—à–∏–±–∫–∞:", error);
  process.exitCode = 1;
});
